#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};

uniform Light light[2];

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};
struct SpotLight {
  vec3 position;
  vec3 direction;

  float cutOff;
  float outerCutOff;

  float constant;
  float linear;
  float quadratic;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};
uniform Material material;

//spot light
uniform float spotlight_intensity;
uniform bool spotLightOff[2];
uniform SpotLight spotLight[2];
uniform bool lightOff[2];
vec3 calcSpotLight(SpotLight light, vec3 norm, vec3 viewDir) {
  // diffuse
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);

  // specular
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);

  // attenuation
  float distance = length(light.position - aPos);
  float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));

  // spotlight intensity
  float theta = dot(lightDir, normalize(-light.direction));
  float epsilon = light.cutOff - light.outerCutOff;
  float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);

  // result
  vec3 ambient = light.ambient * vec3(texture(first_texture, aTexCoord));
  vec3 diffuse = light.diffuse * diff * vec3(texture(first_texture, aTexCoord));
  vec3 specular = light.specular * (spec * material.specular);

  ambient *= attenuation * intensity;
  diffuse *= attenuation * intensity;
  specular *= attenuation * intensity;

  return (ambient + diffuse + specular);
}



void main() {
    vec3 result = vec3(0);
    vec3 norm = normalize(aNormal);
     vec3 viewDir = normalize(viewPos - aPos);
 for(int i=0;i<2;i++){

    if(lightOff[i]){
      // ambient
      vec3 ambient = light[i].ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

      // diffuse

      vec3 lightDir = normalize(light[i].position - aPos);
      float diff = max(dot(norm, lightDir), 0.0);
      vec3 diffuse = light[i].diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb;

      // specular

      vec3 reflectDir = reflect(-lightDir, norm);
      float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
      vec3 specular = light[i].specular * (spec * material.specular);

      result+= ambient + diffuse + specular;
      }
  }
  for(int i=0;i<2;i++){
    if(spotLightOff[i]){
        result += calcSpotLight(spotLight[i], norm, viewDir) * spotlight_intensity;
    }
  }
  fragColor = vec4(result, 1.0);
}